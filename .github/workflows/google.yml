# This workflow will build a docker container, publish it to Google Container Registry, and deploy it to GKE when there is a push to the master branch.
#
# To configure this workflow:
#
# 1. Ensure that your repository contains the necessary configuration for your Google Kubernetes Engine cluster, including deployment.yml, kustomization.yml, service.yml, etc.
#
# 2. Create and configure a Workload Identity Provider for GitHub (https://github.com/google-github-actions/auth#setting-up-workload-identity-federation)
#
# 3. Change the values for the GAR_LOCATION, GKE_ZONE, GKE_CLUSTER, IMAGE, REPOSITORY and DEPLOYMENT_NAME environment variables (below).
#
# For more support on how to run the workflow, please visit https://github.com/google-github-actions/setup-gcloud/tree/master/example-workflows/gke-kustomize

name: Build and Deploy to GKE

on:
  push:
    branches:
      - master

env:
# gcloud artifacts repositories create samples --location=us-central1 
# gcloud artifacts repositories create samples --repository-format=docker --location=us-central1 --description="Docker repository"
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}
  GAR_LOCATION: us-central1 
  GKE_CLUSTER: cluster-1    
  GKE_ZONE: us-central1-c   
  DEPLOYMENT_NAME: gke-test 
  REPOSITORY: samples 
  IMAGE: static-site
  SA_KEY_JSON : ${{secrets.GCP_SA_KEY_JSON}}

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    environment: production

    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    # Alternative option - authentication via credentials json
    - id: 'auth'
      uses: 'google-github-actions/auth@v0'
      with:
        credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

#     - name: Docker configuration
#       run: |-
#         echo ${{steps.auth.outputs.access_token}} | docker login -u oauth2accesstoken --password-stdin https://$GAR_LOCATION-docker.pkg.dev

    # coker run 
    - name: Login to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
        
    # Get the GKE credentials so we can deploy to the cluster
    - name: Set up GKE credentials
      uses: google-github-actions/get-gke-credentials@v0
      with:
        cluster_name: ${{ env.GKE_CLUSTER }}
        location: ${{ env.GKE_ZONE }}

    # configure docker
    - name: Configure Docker
      run: gcloud auth configure-docker --quiet

    # Build the Docker image
    - name: Build
      run: |-
        docker build \
          --tag "$IMAGE:latest" \
          --build-arg GITHUB_SHA="$GITHUB_SHA" \
          --build-arg GITHUB_REF="$GITHUB_REF" \
          .
    # Push the Docker image to Google Artifact Registry
    - name: Publish
      run: |-
        docker tag $IMAGE:latest gcr.io/$PROJECT_ID/$IMAGE:latest
        docker push gcr.io/$PROJECT_ID/$IMAGE:latest
       
    # # Set up kustomize
    # - name: Set up Kustomize
    #   run: |-
    #     curl -sfLo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
    #     chmod u+x ./kustomize
    # # Deploy the Docker image to the GKE cluster
    # - name: Deploy
    #   run: |-
    #     # replacing the image name in the k8s template
    #     ./kustomize edit set image gcr.io/PROJECT_ID/IMAGE:latest=gcr.io/$PROJECT_ID/$IMAGE:latest
    #     ./kustomize build . | kubectl apply -f -
    #     kubectl rollout status deployment/$DEPLOYMENT_NAME
    #     kubectl get services -o wide

    # run the kubectl for gke
    - name : RUN in the GKE with kubectl
      run : |- 
        kubectl run photoalbum --image=gcr.io/$PROJECT_ID/$IMAGE:latest
